/*!
 * atc - Template Compiler
 * https://github.com/cdc-im/atc
 * Released under the MIT, BSD, and GPL Licenses
 */

'use strict';


var template = require('./template.js');
var js_beautify = require('./beautify.js');
var path = require('path');
var fs = require('fs');



var atc = {

    version: 'v1.0.3',

    options: {

        // 模板目录
        path: null,

        // 编译输出目录(前端模板)
        output: null,

        // 编译输出目录(后端模板)
        node: null,

        // 客户端模板模块类型，可选CMD或AMD
        // CMD 模块支持RequireJS与SeaJS这两种模块加载器
        moduleType: 'CMD',

        // 模板编码
        charset: 'utf-8',

        // 是否监控模板目录即时编编译
        watch: false,

        // 是否克隆辅助方法到编译后的模板中
        cloneHelpers: false,

        // 是否使用简洁的模板语法进行编译
        defineSyntax: false

    },


    // 过滤不符合命名规范的目录与模板
    FILTER_RE: /[^\w\.\-$]/,

    // 模板文件后缀
    EXTNAME_RE: /\.(html|htm|tpl)$/i,

    // 公用的辅助模块名字
    HELPERSNAME: '$helpers.js',


    // 加载模板语法设置
    _loadSyntax: function () {
        //var file = __dirname + '/template-syntax.js';
        var code = fs.readFileSync('./template-syntax.js', 'utf-8');
        eval(code);
    },


    Module: (function () {

        template.isCompress = true;


        // 提取include模板
        var REQUIRE_RE = /"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|\/\*[\S\s]*?\*\/|\/(?:\\\/|[^/\r\n])+\/(?=[^\/])|\/\/.*|\.\s*include|(?:^|[^$])\binclude\s*\(\s*(["'])(.+?)\1\s*(,\s*(.+?)\s*)?\)/g; //"
        var SLASH_RE = /\\\\/g

        var parseDependencies = function (code) {
            var ret = [];
            var uniq = {};

            code
            .replace(SLASH_RE, "")
            .replace(REQUIRE_RE, function(m, m1, m2) {
                if (m2 && !uniq.hasOwnProperty(m2)) {
                    ret.push(m2);
                    uniq[m2] = true;
                }
            });

          return ret
        };


        // 1. 相对路径需要以“.”前缀开头
        // 2. 无需后缀名
        var fixPath = function (dir) {
            dir = dir
            .replace(/\\/g, '/')
            .replace(/\.js$/, '');

            if (!/^(\.)*?\//.test(dir)) {
                dir = './' + dir;
            }
            return dir;
        };


        var helpersToCode = function (helpers) {
            cache = [];
            
            for (var name in helpers) {

                if (name !== '$render') {
                    cache.push(
                        '\'' + name + '\': ' + helpers[name].toString()
                    );
                }
            }

            cache = '{' + cache.join(',') + '}';

            return cache;
        };


        var moduleTemplate = function (data) {
            return [
            '<package_open>'
                '<dependencies>',
                'var helpers=<helpers>',
                '<define_$render>',
                'var Render=<main>',
                'Render.prototype=helpers',
                '<exports>function(data){',
                    '<set_$render>',
                    "return new Render(data) + ''",
                '}',
            '<package_close>'
            ].join('\n')
            .replace(/<([^>]+)>/g, function ($1, $2) {
                return data[$2] || '';
            });
        };

        var Module = function (code, helpersPath) {

            template.onerror = function (e) {
                throw e;
            };


            var render = template.compile(code);
            var helpers = render.prototype;
            var renderCode = render.toString()
            .replace(/^function\s+(anonymous)/, 'function');
      
            
            this.helpers = helpers;
            this.dependencies = parseDependencies(renderCode);
            this.helpersPath = helpersPath;
            this.renderCode = renderCode;

        };

        Module.prototype = {

            toCMD: function () {
                return this.toCommonJS(true);
            },


            toCommonJS: function (isAsyn) {

                var dependencies = this.dependencies;
                var renderCode = this.renderCode;
                var helpers = this.helpers;
                var helpersPath = fixPath(this.helpersPath);


                if (helpersPath) {
                    data['helpers'] = "require('" + helpersPath + "')";
                } else {
                    data['helpers'] = helpersToCode(helpers);
                }


                var data = {};


                if (dependencies.length) {

                    var dependenciesCode = [];

                    dependencies.forEach(function (file) {
                        dependenciesCode.push(
                            '\'' + file + '\': ' + 'require(\'' + fixPath(file) + '\')'
                        );
                    });

                    dependenciesCode = '{' + dependenciesCode.join(',') + '}';

                    data['dependencies'] = 'var dependencies=' + dependenciesCode;

                    data['define_$render'] = [
                    'var $render=function(id,data){',
                        'return dependencies[id](data)',
                    '}'
                    ].join('\n');

                    data['set_$render'] = 'helpers.$render=$render';

                }

                data['main'] = renderCode;
                
                if (isAsyn) {
                    data['exports'] = 'return ';
                    data['package_open'] = 'define(function(require){';
                    data['package_close'] = '})';
                } else {
                    data['exports'] = 'module.exports=';
                } 

                return moduleTemplate(data);
            },

            toAMD: function () {

                var dependencies = this.dependencies;
                var renderCode = this.renderCode;
                var helpers = this.helpers;
                var helpersPath = fixPath(this.helpersPath);


                if (helpersPath) {
                    dependencies.push(helpersPath);
                    data['helpers'] = '$' + (dependencies.length - 1);
                } else {
                    data['helpers'] = helpersToCode(helpers);
                }

                dependencies.forEach(function (file) {
                    this[file] = fixPath(file);
                });


                var data = {};


                if (dependencies.length) {

                    data['paths'] = JSON.stringify(dependencies) + ',';

                    for (var i = 0, names = []; i < data.paths.length; i ++) {
                        names.push('$' + i);
                    }

                    data['names'] = names.join(',')

                    var dependenciesCode = [];

                    dependencies.forEach(function (file, index) {
                        if (file !== helpersPath) {
                            dependenciesCode.push(
                                "'" + file + "': " + names[index]
                            );
                        }
                    });

                    dependenciesCode = '{' + dependenciesCode.join(',') + '}';

                    data['dependencies'] = 'var dependencies=' + dependenciesCode;

                    data['define_$render'] = [
                    'var $render=function(id,data){',
                        'return dependencies[id](data)',
                    '}'
                    ].join('\n');

                    data['set_$render'] = 'helpers.$render=$render';

                }


                data['main'] = renderCode;
                data['exports'] = 'return ';
                data['package_open'] = 'define('+ paths + 'function(' + names + '){';
                data['package_close'] = '})';

                return moduleTemplate(data);
            }
        };

        return Module;

    })(),

    
    /** 格式化JS */
    _format: function(code) {

        if (typeof js_beautify !== 'undefined') {

            js_beautify =
            typeof js_beautify === 'function'
            ? js_beautify
            : js_beautify.js_beautify;

            var config = {
                indent_size: 4,
                indent_char: ' ',
                preserve_newlines: true,
                braces_on_own_line: false,
                keep_array_indentation: false,
                space_after_anon_function: true
            };

            code = js_beautify(code, config);
        }

        return code;
    },


    /** 外置辅助方法 */
    writeHelpers: function () {

        var helpers = [];
        var prototype = template.prototype;

        for (var name in prototype) {
            if (name !== '$render') {
                helpers.push('\'' + name + '\': ' + prototype[name].toString());
            }
        }

        helpers = '{\n' + helpers.join(',\n') + '}';

        var module = 'define(function () {'
        +    'return ' + helpers
        + '});'

        module = this._format(module);

        this._fsWrite(this._output  + '/' + this.HELPERSNAME, module);

        if (this._node) {
            this._fsWrite(this._node  + '/' + this.HELPERSNAME, module);
        }
    },


    // 绑定文件监听事件
    _onwatch: function (dir, callback) {

        var that = this;
        var watchList = {};
        var timer = {};

        function walk (dir) {
            fs.readdirSync(dir).forEach(function (item) {
                var fullname = dir + '/' + item;
                if (fs.statSync(fullname).isDirectory()){
                    watch(fullname);
                    walk(fullname);
                }
            });
        };

        // 排除“.”、“_”开头或者非英文命名的目录
        function filter (name) {
            return !that.FILTER_RE.test(name);
        };

        function watch (parent) {

            var target = path.basename(parent);

            if (!filter(target)){
                return;
            }

            if (watchList[parent]) {
                watchList[parent].close();
            }

            watchList[parent] = fs.watch(parent, function (event, filename) {

                var fullname = parent + '/' + filename;
                var type;
                var fstype;

                if (!filter(filename)) {
                    return;
                }

                // 检查文件、目录是否存在
                if (!fs.existsSync(fullname)) {

                    // 如果目录被删除则关闭监视器
                    if (watchList[fullname]) {
                        fstype = 'directory';
                        watchList[fullname].close();
                        delete watchList[fullname];
                    } else {
                        fstype = 'file';
                    }

                    type = 'delete';

                } else {

                    // 文件
                    if (fs.statSync(fullname).isFile()) {

                        fstype = 'file';
                        type = event == 'rename' ? 'create' : 'updated'

                    // 文件夹
                    } else if (event === 'rename') {

                        fstype = 'directory';
                        type = 'create'
                        watch(fullname);
                        walk(fullname);
                    }

                }

                var eventData = {
                    type: type,
                    target: filename,
                    parent: parent,
                    fstype: fstype
                };

                
                if (/windows/i.test(require('os').type())) {
                    // window 下 nodejs fs.watch 不稳定(nodejs v0.10.5)
                    clearTimeout(timer[fullname]);
                    timer[fullname] = setTimeout(function() {
                        callback(eventData);
                    }, 16);

                } else {
                    callback(eventData);
                }


            });

        };

        watch(dir);
        walk(dir);
    },


    // 筛选模板文件
    _filter: function (name) {
        return !this.FILTER_RE.test(name) && this.EXTNAME_RE.test(name);
    },


    // 模板文件写入
    _fsWrite: function (file, data) {

        this._fsMkdir(path.dirname(file));

        return fs.writeFileSync(file, data, this.options['charset']);
    },


    // 模板文件读取
    _fsRead: function (file) {
        return fs.readFileSync(file, this.options['charset']);
    },


    // 创建目录
    _fsMkdir: function (dir) {

        var currPath = dir;
        var toMakeUpPath = [];

        while (!fs.existsSync(currPath)) {
            toMakeUpPath.unshift(currPath);
            currPath = path.dirname(currPath);
        }

        toMakeUpPath.forEach(function (pathItem) {
            fs.mkdirSync(pathItem);
        });

    },


    // 删除模板文件
    _fsUnlink: function (file) {
        file = file.replace(this._path , this._output);
        return fs.existsSync(file) && fs.unlink(file);
    },


    /** 监听模板的修改进行即时编译 */
    watch: function () {

        var that = this;

        // 监控模板目录
        this._onwatch(this._path , function (event) {
            var type = event.type;
            var fstype = event.fstype;
            var target = event.target;
            var parent = event.parent;
            var fullname = parent + '/' + target;

            if (target && fstype === 'file' && that._filter(target)) {

                if (type === 'delete') {
                    fullname = fullname.replace(that.EXTNAME_RE, '');
                    that._fsUnlink(fullname.replace(that._path , that._output) + 'js');
                    that._fsUnlink(fullname.replace(that._path , that._node) + '');
                } else
                if (type === 'updated' || type === 'create') {
                    that.compile(fullname);
                }
            }
        });

    },


    /**
     * 编译单个模板
     * @param   {String}    文件
     * @return  {Boolean}   成功true, 失败false
     */
    compile: function (file) {

        var name = null;
        var that = this;
        var success = true;

        // 计算辅助方法模块的相对路径
        if (!this.options['cloneHelpers']) {
            name = this.HELPERSNAME;
            var dirname = path.dirname(file);
            var join = path.join(this._path , name);
            name = path.relative(dirname, join);
        }


        var source = this._fsRead(file);
        var target = file
        .replace(this.EXTNAME_RE, '.js')
        .replace(this._path , this._output);

        var info = file.replace(this._path, '');
        console.log('Compile: ' + this.options['path'] + info);

        try {
            
            var code;
            var target;
            var info_output;
            var Module = new this.Module(source, name);


            // 输出浏览器端异步模块
            code = Module.toCMD();
            code = this._format(code);
            target = file
            .replace(this.EXTNAME_RE, '.js')
            .replace(this._path , this._output);
            this._fsWrite(target, code);
            info_output = this.options['output'] + info.replace(this.EXTNAME_RE, '.js');
            console.log('Output: ' + info_output);


            // 输出 NodeJS 模块
            if (this._node) {
                code = Module.toCommonJS();
                code = this._format(code);
                target = file
                .replace(this.EXTNAME_RE, '')
                .replace(this._path , this._node);
                this._fsWrite(target, code);
                info_output = this.options['node'] + info.replace(this.EXTNAME_RE, '');
                console.log('Output: ' + info_output);
            }


            

        } catch (e) {

            console.log('\x1B[7m\x1B[31m' + e.name + '\x1B[39m\x1B[27m');
            success = false;
            this._debug(e.temp);
            process.exit(1);
        }

        return success;
    },


    // 调试语法错误
    _debug: function (code) {
        
        var code = this._format(code);
        var debugFile = this._output + '/.debug.js';
        
        try {
            this._fsWrite(debugFile, code);
            require(debugFile);
        } catch (e) {
            console.log(code);
            this._fsUnlink(debugFile);
        }
    },


    /** 编译模板目录所有的模板 */
    compileAll: function () {

        var that = this;
        var success = true;

        var walk = function (dir) {
            var dirList = fs.readdirSync(dir);

            success && dirList.forEach(function (item) {
                if (fs.statSync(dir + '/' + item).isDirectory()) {
                    walk(dir + '/' + item);
                } else if (that._filter(item)) {
                    success = that.compile(dir + '/' + item);
                }
            });

        };

        walk(this._path);
    },

    init: function (options) {

        for (var name in options) {
            this.options[name] = options[name];
        }

        // 标准化路径：去掉末尾斜杠
        options['path'] = options['path'].replace(/[\/\\]$/, '');
        options['output'] = (options['output'] || options['path']).replace(/[\/\\]$/, '');
        options['node'] = (options['node'] || '').replace(/[\/\\]$/, '');


        // 转换成绝对路径
        this._path = path.resolve(options['path']).replace(/[\/\\]$/, '');
        this._output = path.resolve(options['output']).replace(/[\/\\]$/, '');
        this._node = path.resolve(options['node']).replace(/[\/\\]$/, '');


        // 加载引擎语法配置
        options['defineSyntax'] && this._defineSyntax();


        // 输出公用模块
        !options['cloneHelpers'] && this.writeHelpers();


        if (options['watch']) {

            // 监控模板修改进行即时编译
            this.watch();

        } else {

            // 编译目录中所有模板
            this.compileAll();

        }

    }

};


module.exports = atc;
